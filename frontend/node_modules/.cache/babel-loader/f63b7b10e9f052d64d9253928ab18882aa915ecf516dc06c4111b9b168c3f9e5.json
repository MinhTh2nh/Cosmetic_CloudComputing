{"ast":null,"code":"import axios from \"axios\";\nconst url = `${process.env.REACT_APP_API_URL}`;\nexport const loginAdmin = data => {\n  console.log(\"data of admin : \", data);\n  return async dispatch => {\n    try {\n      const response = await axios.post(`${url}/users/loginadmin`, data);\n      const output = response.data;\n      if (output.status === \"success\") {\n        dispatch({\n          type: \"LOGIN_ADMIN_SUCCESS\",\n          payload: output.token\n        });\n      }\n    } catch (error) {\n      const output = error.response.data;\n      dispatch({\n        type: \"LOGIN_ADMIN_FAILED\",\n        payload: output.error\n      });\n    }\n  };\n};\nexport const userLoginFacebook = data => {\n  // remember to make if the name is same that directly proceed to login.\n  var facebookName = data.name;\n  // delete space between text & lowercase them.\n  let removedSpacesFacebookName = facebookName.split(\" \").join(\"\");\n  let fixLowercasedFacebookName = removedSpacesFacebookName.toLowerCase();\n\n  // get only 4 unique number from id to avoid phoneNumber backend validation\n  var uniqueNumberOfId = data.id.substr(data.id.length - 4);\n  let autoRegisterWithFacebook = {\n    username: fixLowercasedFacebookName,\n    email: `fb+${data.email}`,\n    phoneNumber: `00001111${uniqueNumberOfId}`,\n    password: \"00001111\"\n  };\n  return async dispatch => {\n    try {\n      const responseRegister = await axios.post(`${url}/users/register`, autoRegisterWithFacebook);\n      if (responseRegister.data.status === \"success\") {\n        // auto login\n        let autoLoginWithFacebook = {\n          email: `fb+${data.email}`,\n          password: \"00001111\"\n        };\n        try {\n          const response = await axios.post(`${url}/users/login`, autoLoginWithFacebook);\n          const output = response.data;\n          if (output.status === \"success\") {\n            dispatch({\n              type: \"LOGIN_USER_SUCCESS\",\n              payload: output.token\n            });\n          }\n        } catch (error) {\n          const output = error.response.data;\n          console.log(output);\n        }\n      } else {\n        return false;\n      }\n    } catch (error) {\n      const output = error.response.data;\n      if (output.status === \"error\") {\n        // auto login\n        let autoLoginWithFacebook = {\n          email: `fb+${data.email}`,\n          password: \"00001111\"\n        };\n        try {\n          const response = await axios.post(`${url}/users/login`, autoLoginWithFacebook);\n          const output = response.data;\n          if (output.status === \"success\") {\n            dispatch({\n              type: \"LOGIN_USER_SUCCESS\",\n              payload: output.token\n            });\n          }\n        } catch (error) {\n          const output = error.response.data;\n          console.log(output);\n        }\n      } else {\n        return false;\n      }\n    }\n    // return (dispatch) => {\n    //   dispatch({\n    //     type: \"USER_LOGIN_FACEBOOK\",\n    //     payload: data,\n    //   });\n    // };\n  };\n};\n\nexport const loginUser = data => {\n  return async dispatch => {\n    try {\n      const response = await axios.post(`${url}/users/login`, data);\n      console.log(data);\n      const output = response.data;\n      if (output.status === \"success\") {\n        dispatch({\n          type: \"LOGIN_USER_SUCCESS\",\n          payload: output.token\n        });\n      }\n    } catch (error) {\n      const output = error.response.data;\n      dispatch({\n        type: \"LOGIN_USER_FAILED\",\n        payload: output.error\n      });\n    }\n  };\n};\nexport const registerUser = data => {\n  return async dispatch => {\n    try {\n      const response = await axios.post(`${url}/users/register`, data);\n      console.log(response);\n      const output = response.data;\n      if (output.status === \"success\") {\n        dispatch({\n          type: \"REGISTER_USER_SUCCESS\",\n          payload: output.message\n        });\n      }\n    } catch (error) {\n      const output = error.response.data;\n      if (output.message) {\n        dispatch({\n          type: \"REGISTER_USER_FAIL\",\n          payload: output.message\n        });\n      } else {\n        dispatch({\n          // error of same username/email/phoneNumber,it has to be unique no duplication/same username.\n          type: \"REGISTER_USER_INVALID\",\n          payload: output.error\n        });\n      }\n    }\n  };\n};\nexport const userLogout = () => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGOUT_USER\"\n    });\n  };\n};","map":{"version":3,"names":["axios","url","process","env","REACT_APP_API_URL","loginAdmin","data","console","log","dispatch","response","post","output","status","type","payload","token","error","userLoginFacebook","facebookName","name","removedSpacesFacebookName","split","join","fixLowercasedFacebookName","toLowerCase","uniqueNumberOfId","id","substr","length","autoRegisterWithFacebook","username","email","phoneNumber","password","responseRegister","autoLoginWithFacebook","loginUser","registerUser","message","userLogout"],"sources":["C:/Thuchanh/ThamKhao/frontend/src/actionCreators/LoginAction.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst url = `${process.env.REACT_APP_API_URL}`;\r\n\r\nexport const loginAdmin = (data) => {\r\n  console.log(\"data of admin : \" , data)\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(`${url}/users/loginadmin`, data);\r\n      const output = response.data;\r\n\r\n      if (output.status === \"success\") {\r\n        dispatch({\r\n          type: \"LOGIN_ADMIN_SUCCESS\",\r\n          payload: output.token,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      const output = error.response.data;\r\n      dispatch({\r\n        type: \"LOGIN_ADMIN_FAILED\",\r\n        payload: output.error,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const userLoginFacebook = (data) => {\r\n  // remember to make if the name is same that directly proceed to login.\r\n  var facebookName = data.name;\r\n  // delete space between text & lowercase them.\r\n  let removedSpacesFacebookName = facebookName.split(\" \").join(\"\");\r\n  let fixLowercasedFacebookName = removedSpacesFacebookName.toLowerCase();\r\n\r\n  // get only 4 unique number from id to avoid phoneNumber backend validation\r\n  var uniqueNumberOfId = data.id.substr(data.id.length - 4);\r\n\r\n  let autoRegisterWithFacebook = {\r\n    username: fixLowercasedFacebookName,\r\n    email: `fb+${data.email}`,\r\n    phoneNumber: `00001111${uniqueNumberOfId}`,\r\n    password: \"00001111\",\r\n  };\r\n  return async (dispatch) => {\r\n    try {\r\n      const responseRegister = await axios.post(\r\n        `${url}/users/register`,\r\n        autoRegisterWithFacebook\r\n      );\r\n      if (responseRegister.data.status === \"success\") {\r\n        // auto login\r\n        let autoLoginWithFacebook = {\r\n          email: `fb+${data.email}`,\r\n          password: \"00001111\",\r\n        };\r\n        try {\r\n          const response = await axios.post(\r\n            `${url}/users/login`,\r\n            autoLoginWithFacebook\r\n          );\r\n\r\n          const output = response.data;\r\n\r\n          if (output.status === \"success\") {\r\n            dispatch({\r\n              type: \"LOGIN_USER_SUCCESS\",\r\n              payload: output.token,\r\n            });\r\n          }\r\n        } catch (error) {\r\n          const output = error.response.data;\r\n          console.log(output);\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      const output = error.response.data;\r\n      if (output.status === \"error\") {\r\n        // auto login\r\n        let autoLoginWithFacebook = {\r\n          email: `fb+${data.email}`,\r\n          password: \"00001111\",\r\n        };\r\n        try {\r\n          const response = await axios.post(\r\n            `${url}/users/login`,\r\n            autoLoginWithFacebook\r\n          );\r\n\r\n          const output = response.data;\r\n\r\n          if (output.status === \"success\") {\r\n            dispatch({\r\n              type: \"LOGIN_USER_SUCCESS\",\r\n              payload: output.token,\r\n            });\r\n          }\r\n        } catch (error) {\r\n          const output = error.response.data;\r\n          console.log(output);\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    // return (dispatch) => {\r\n    //   dispatch({\r\n    //     type: \"USER_LOGIN_FACEBOOK\",\r\n    //     payload: data,\r\n    //   });\r\n    // };\r\n  };\r\n};\r\n\r\nexport const loginUser = (data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(`${url}/users/login`, data);\r\n      console.log(data)\r\n      const output = response.data;\r\n\r\n      if (output.status === \"success\") {\r\n        dispatch({\r\n          type: \"LOGIN_USER_SUCCESS\",\r\n          payload: output.token,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      const output = error.response.data;\r\n      dispatch({\r\n        type: \"LOGIN_USER_FAILED\",\r\n        payload: output.error,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const registerUser = (data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(`${url}/users/register`, data);\r\n      console.log(response);\r\n\r\n      const output = response.data;\r\n      if (output.status === \"success\") {\r\n        dispatch({\r\n          type: \"REGISTER_USER_SUCCESS\",\r\n          payload: output.message,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      const output = error.response.data;\r\n      if (output.message) {\r\n        dispatch({\r\n          type: \"REGISTER_USER_FAIL\",\r\n          payload: output.message,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          // error of same username/email/phoneNumber,it has to be unique no duplication/same username.\r\n          type: \"REGISTER_USER_INVALID\",\r\n          payload: output.error,\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const userLogout = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"LOGOUT_USER\",\r\n    });\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}